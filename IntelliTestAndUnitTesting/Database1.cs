

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "IntelliTestAndUnitTesting\App.config"
//     Connection String Name: "AdventureWorks"
//     Connection String:      "Data Source=.\SQL2014;Initial Catalog=AdventureWorks2014;Integrated Security=true"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace IntelliTestAndUnitTesting
{
    // ************************************************************************
    // Unit of work
    public interface IMyDbContext : IDisposable
    {
        DbSet<Person_Address> Person_Addresses { get; set; } // Address
        DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        DbSet<Person_Password> Person_Passwords { get; set; } // Password
        DbSet<Person_Person> Person_People { get; set; } // Person
        DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        DbSet<Person_VAdditionalContactInfo> Person_VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        DbSet<Person_VStateProvinceCountryRegion> Person_VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<Person_Address> Person_Addresses { get; set; } // Address
        public DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        public DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        public DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        public DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        public DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        public DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        public DbSet<Person_Password> Person_Passwords { get; set; } // Password
        public DbSet<Person_Person> Person_People { get; set; } // Person
        public DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        public DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        public DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        public DbSet<Person_VAdditionalContactInfo> Person_VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        public DbSet<Person_VStateProvinceCountryRegion> Person_VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion
        
        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=AdventureWorks")
        {
        }

        public MyDbContext(string connectionString) : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new Person_AddressConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoConfiguration());
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Person_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Person_Address> Person_Addresses { get; set; }
        public DbSet<Person_AddressType> Person_AddressTypes { get; set; }
        public DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; }
        public DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; }
        public DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; }
        public DbSet<Person_ContactType> Person_ContactTypes { get; set; }
        public DbSet<Person_CountryRegion> Person_CountryRegions { get; set; }
        public DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; }
        public DbSet<Person_Password> Person_Passwords { get; set; }
        public DbSet<Person_Person> Person_People { get; set; }
        public DbSet<Person_PersonPhone> Person_PersonPhones { get; set; }
        public DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; }
        public DbSet<Person_StateProvince> Person_StateProvinces { get; set; }
        public DbSet<Person_VAdditionalContactInfo> Person_VAdditionalContactInfoes { get; set; }
        public DbSet<Person_VStateProvinceCountryRegion> Person_VStateProvinceCountryRegions { get; set; }

        public FakeMyDbContext()
        {
            Person_Addresses = new FakeDbSet<Person_Address>("AddressId");
            Person_AddressTypes = new FakeDbSet<Person_AddressType>("AddressTypeId");
            Person_BusinessEntities = new FakeDbSet<Person_BusinessEntity>("BusinessEntityId");
            Person_BusinessEntityAddresses = new FakeDbSet<Person_BusinessEntityAddress>("BusinessEntityId", "AddressId", "AddressTypeId");
            Person_BusinessEntityContacts = new FakeDbSet<Person_BusinessEntityContact>("BusinessEntityId", "PersonId", "ContactTypeId");
            Person_ContactTypes = new FakeDbSet<Person_ContactType>("ContactTypeId");
            Person_CountryRegions = new FakeDbSet<Person_CountryRegion>("CountryRegionCode");
            Person_EmailAddresses = new FakeDbSet<Person_EmailAddress>("BusinessEntityId", "EmailAddressId");
            Person_Passwords = new FakeDbSet<Person_Password>("BusinessEntityId");
            Person_People = new FakeDbSet<Person_Person>("BusinessEntityId");
            Person_PersonPhones = new FakeDbSet<Person_PersonPhone>("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");
            Person_PhoneNumberTypes = new FakeDbSet<Person_PhoneNumberType>("PhoneNumberTypeId");
            Person_StateProvinces = new FakeDbSet<Person_StateProvince>("StateProvinceId");
            Person_VAdditionalContactInfoes = new FakeDbSet<Person_VAdditionalContactInfo>("BusinessEntityId", "FirstName", "LastName", "Rowguid", "ModifiedDate");
            Person_VStateProvinceCountryRegions = new FakeDbSet<Person_VStateProvinceCountryRegion>("StateProvinceId", "StateProvinceCode", "IsOnlyStateProvinceFlag", "StateProvinceName", "TerritoryId", "CountryRegionCode", "CountryRegionName");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Address
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_Address
    {

        ///<summary>
        /// Primary key for Address records.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// First street address line.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1

        ///<summary>
        /// Second street address line.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2

        ///<summary>
        /// Name of the city.
        ///</summary>
        public string City { get; set; } // City

        ///<summary>
        /// Unique identification number for the state or province. Foreign key to StateProvince table.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// Postal code for the street address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode

        ///<summary>
        /// Latitude and longitude of this address.
        ///</summary>
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID
        
        public Person_Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new List<Person_BusinessEntityAddress>();
        }
    }

    // AddressType
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_AddressType
    {

        ///<summary>
        /// Primary key for AddressType records.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// Address type description. For example, Billing, Home, or Shipping.
        ///</summary>
        public string Name { get; set; } // Name

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping
        
        public Person_AddressType()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new List<Person_BusinessEntityAddress>();
        }
    }

    // BusinessEntity
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_BusinessEntity
    {

        ///<summary>
        /// Primary key for all customers, vendors, and employees.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping
        public virtual ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping
        public virtual Person_Person Person_Person { get; set; } // Person.FK_Person_BusinessEntity_BusinessEntityID
        
        public Person_BusinessEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new List<Person_BusinessEntityAddress>();
            Person_BusinessEntityContacts = new List<Person_BusinessEntityContact>();
        }
    }

    // BusinessEntityAddress
    public class Person_BusinessEntityAddress
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Address.AddressID.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to AddressType.AddressTypeID.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Address Person_Address { get; set; } // FK_BusinessEntityAddress_Address_AddressID
        public virtual Person_AddressType Person_AddressType { get; set; } // FK_BusinessEntityAddress_AddressType_AddressTypeID
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
        
        public Person_BusinessEntityAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // BusinessEntityContact
    public class Person_BusinessEntityContact
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int PersonId { get; set; } // PersonID (Primary key)

        ///<summary>
        /// Primary key.  Foreign key to ContactType.ContactTypeID.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
        public virtual Person_ContactType Person_ContactType { get; set; } // FK_BusinessEntityContact_ContactType_ContactTypeID
        public virtual Person_Person Person_Person { get; set; } // FK_BusinessEntityContact_Person_PersonID
        
        public Person_BusinessEntityContact()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ContactType
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_ContactType
    {

        ///<summary>
        /// Primary key for ContactType records.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// Contact type description.
        ///</summary>
        public string Name { get; set; } // Name

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping
        
        public Person_ContactType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new List<Person_BusinessEntityContact>();
        }
    }

    // CountryRegion
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_CountryRegion
    {

        ///<summary>
        /// ISO standard code for countries and regions.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key)

        ///<summary>
        /// Country or region name.
        ///</summary>
        public string Name { get; set; } // Name

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode
        
        public Person_CountryRegion()
        {
            ModifiedDate = System.DateTime.Now;
            Person_StateProvinces = new List<Person_StateProvince>();
        }
    }

    // EmailAddress
    public class Person_EmailAddress
    {

        ///<summary>
        /// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. ID of this email address.
        ///</summary>
        public int EmailAddressId { get; set; } // EmailAddressID (Primary key)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        public string EmailAddress { get; set; } // EmailAddress

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_EmailAddress_Person_BusinessEntityID
        
        public Person_EmailAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Password
    public class Person_Password
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        public string PasswordHash { get; set; } // PasswordHash

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        public string PasswordSalt { get; set; } // PasswordSalt

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_Password_Person_BusinessEntityID
        
        public Person_Password()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Person
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_Person
    {

        ///<summary>
        /// Primary key for Person records.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
        ///</summary>
        public string PersonType { get; set; } // PersonType

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        public string Title { get; set; } // Title

        ///<summary>
        /// First name of the person.
        ///</summary>
        public string FirstName { get; set; } // FirstName

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName

        ///<summary>
        /// Last name of the person.
        ///</summary>
        public string LastName { get; set; } // LastName

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        public string Suffix { get; set; } // Suffix

        ///<summary>
        /// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        ///</summary>
        public int EmailPromotion { get; set; } // EmailPromotion

        ///<summary>
        /// Additional contact information about the person stored in xml format.
        ///</summary>
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        ///<summary>
        /// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        ///</summary>
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping
        public virtual ICollection<Person_EmailAddress> Person_EmailAddresses { get; set; } // Many to many mapping
        public virtual ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // Many to many mapping
        public virtual Person_Password Person_Password { get; set; } // Password.FK_Password_Person_BusinessEntityID

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Person_BusinessEntity_BusinessEntityID
        
        public Person_Person()
        {
            NameStyle = false;
            EmailPromotion = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new List<Person_BusinessEntityContact>();
            Person_EmailAddresses = new List<Person_EmailAddress>();
            Person_PersonPhones = new List<Person_PersonPhone>();
        }
    }

    // PersonPhone
    public class Person_PersonPhone
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Telephone number identification number.
        ///</summary>
        public string PhoneNumber { get; set; } // PhoneNumber (Primary key)

        ///<summary>
        /// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_PersonPhone_Person_BusinessEntityID
        public virtual Person_PhoneNumberType Person_PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
        
        public Person_PersonPhone()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PhoneNumberType
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_PhoneNumberType
    {

        ///<summary>
        /// Primary key for telephone number type records.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Name of the telephone number type
        ///</summary>
        public string Name { get; set; } // Name

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // Many to many mapping
        
        public Person_PhoneNumberType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_PersonPhones = new List<Person_PersonPhone>();
        }
    }

    // StateProvince
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.17.1.0")]
    public class Person_StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        public string StateProvinceCode { get; set; } // StateProvinceCode

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        public string Name { get; set; } // Name

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual ICollection<Person_Address> Person_Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID

        // Foreign keys
        public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode
        
        public Person_StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_Addresses = new List<Person_Address>();
        }
    }

    // vAdditionalContactInfo
    public class Person_VAdditionalContactInfo
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string LastName { get; set; } // LastName
        public string TelephoneNumber { get; set; } // TelephoneNumber
        public string TelephoneSpecialInstructions { get; set; } // TelephoneSpecialInstructions
        public string Street { get; set; } // Street
        public string City { get; set; } // City
        public string StateProvince { get; set; } // StateProvince
        public string PostalCode { get; set; } // PostalCode
        public string CountryRegion { get; set; } // CountryRegion
        public string HomeAddressSpecialInstructions { get; set; } // HomeAddressSpecialInstructions
        public string EMailAddress { get; set; } // EMailAddress
        public string EMailSpecialInstructions { get; set; } // EMailSpecialInstructions
        public string EMailTelephoneNumber { get; set; } // EMailTelephoneNumber
        public Guid Rowguid { get; set; } // rowguid
        public DateTime ModifiedDate { get; set; } // ModifiedDate
    }

    // vStateProvinceCountryRegion
    public class Person_VStateProvinceCountryRegion
    {
        public int StateProvinceId { get; set; } // StateProvinceID
        public string StateProvinceCode { get; set; } // StateProvinceCode
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag
        public string StateProvinceName { get; set; } // StateProvinceName
        public int TerritoryId { get; set; } // TerritoryID
        public string CountryRegionCode { get; set; } // CountryRegionCode
        public string CountryRegionName { get; set; } // CountryRegionName
    }


    // ************************************************************************
    // POCO Configuration

    // Address
    public class Person_AddressConfiguration : EntityTypeConfiguration<Person_Address>
    {
        public Person_AddressConfiguration()
            : this("Person")
        {
        }
 
        public Person_AddressConfiguration(string schema)
        {
            ToTable(schema + ".Address");
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName("AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName("AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName("City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SpatialLocation).HasColumnName("SpatialLocation").IsOptional().HasColumnType("geography");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_StateProvince).WithMany(b => b.Person_Addresses).HasForeignKey(c => c.StateProvinceId); // FK_Address_StateProvince_StateProvinceID
        }
    }

    // AddressType
    public class Person_AddressTypeConfiguration : EntityTypeConfiguration<Person_AddressType>
    {
        public Person_AddressTypeConfiguration()
            : this("Person")
        {
        }
 
        public Person_AddressTypeConfiguration(string schema)
        {
            ToTable(schema + ".AddressType");
            HasKey(x => x.AddressTypeId);

            Property(x => x.AddressTypeId).HasColumnName("AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BusinessEntity
    public class Person_BusinessEntityConfiguration : EntityTypeConfiguration<Person_BusinessEntity>
    {
        public Person_BusinessEntityConfiguration()
            : this("Person")
        {
        }
 
        public Person_BusinessEntityConfiguration(string schema)
        {
            ToTable(schema + ".BusinessEntity");
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BusinessEntityAddress
    public class Person_BusinessEntityAddressConfiguration : EntityTypeConfiguration<Person_BusinessEntityAddress>
    {
        public Person_BusinessEntityAddressConfiguration()
            : this("Person")
        {
        }
 
        public Person_BusinessEntityAddressConfiguration(string schema)
        {
            ToTable(schema + ".BusinessEntityAddress");
            HasKey(x => new { x.BusinessEntityId, x.AddressId, x.AddressTypeId });

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName("AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName("AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Address).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.AddressId); // FK_BusinessEntityAddress_Address_AddressID
            HasRequired(a => a.Person_AddressType).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.AddressTypeId); // FK_BusinessEntityAddress_AddressType_AddressTypeID
            HasRequired(a => a.Person_BusinessEntity).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.BusinessEntityId); // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
        }
    }

    // BusinessEntityContact
    public class Person_BusinessEntityContactConfiguration : EntityTypeConfiguration<Person_BusinessEntityContact>
    {
        public Person_BusinessEntityContactConfiguration()
            : this("Person")
        {
        }
 
        public Person_BusinessEntityContactConfiguration(string schema)
        {
            ToTable(schema + ".BusinessEntityContact");
            HasKey(x => new { x.BusinessEntityId, x.PersonId, x.ContactTypeId });

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PersonId).HasColumnName("PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeId).HasColumnName("ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_BusinessEntity).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.BusinessEntityId); // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
            HasRequired(a => a.Person_ContactType).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.ContactTypeId); // FK_BusinessEntityContact_ContactType_ContactTypeID
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.PersonId); // FK_BusinessEntityContact_Person_PersonID
        }
    }

    // ContactType
    public class Person_ContactTypeConfiguration : EntityTypeConfiguration<Person_ContactType>
    {
        public Person_ContactTypeConfiguration()
            : this("Person")
        {
        }
 
        public Person_ContactTypeConfiguration(string schema)
        {
            ToTable(schema + ".ContactType");
            HasKey(x => x.ContactTypeId);

            Property(x => x.ContactTypeId).HasColumnName("ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CountryRegion
    public class Person_CountryRegionConfiguration : EntityTypeConfiguration<Person_CountryRegion>
    {
        public Person_CountryRegionConfiguration()
            : this("Person")
        {
        }
 
        public Person_CountryRegionConfiguration(string schema)
        {
            ToTable(schema + ".CountryRegion");
            HasKey(x => x.CountryRegionCode);

            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // EmailAddress
    public class Person_EmailAddressConfiguration : EntityTypeConfiguration<Person_EmailAddress>
    {
        public Person_EmailAddressConfiguration()
            : this("Person")
        {
        }
 
        public Person_EmailAddressConfiguration(string schema)
        {
            ToTable(schema + ".EmailAddress");
            HasKey(x => new { x.BusinessEntityId, x.EmailAddressId });

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EmailAddressId).HasColumnName("EmailAddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName("EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_EmailAddresses).HasForeignKey(c => c.BusinessEntityId); // FK_EmailAddress_Person_BusinessEntityID
        }
    }

    // Password
    public class Person_PasswordConfiguration : EntityTypeConfiguration<Person_Password>
    {
        public Person_PasswordConfiguration()
            : this("Person")
        {
        }
 
        public Person_PasswordConfiguration(string schema)
        {
            ToTable(schema + ".Password");
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PasswordHash).HasColumnName("PasswordHash").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName("PasswordSalt").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithOptional(b => b.Person_Password); // FK_Password_Person_BusinessEntityID
        }
    }

    // Person
    public class Person_PersonConfiguration : EntityTypeConfiguration<Person_Person>
    {
        public Person_PersonConfiguration()
            : this("Person")
        {
        }
 
        public Person_PersonConfiguration(string schema)
        {
            ToTable(schema + ".Person");
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PersonType).HasColumnName("PersonType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.NameStyle).HasColumnName("NameStyle").IsRequired().HasColumnType("bit");
            Property(x => x.Title).HasColumnName("Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName("Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.EmailPromotion).HasColumnName("EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AdditionalContactInfo).HasColumnName("AdditionalContactInfo").IsOptional().HasColumnType("xml");
            Property(x => x.Demographics).HasColumnName("Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_BusinessEntity).WithOptional(b => b.Person_Person); // FK_Person_BusinessEntity_BusinessEntityID
        }
    }

    // PersonPhone
    public class Person_PersonPhoneConfiguration : EntityTypeConfiguration<Person_PersonPhone>
    {
        public Person_PersonPhoneConfiguration()
            : this("Person")
        {
        }
 
        public Person_PersonPhoneConfiguration(string schema)
        {
            ToTable(schema + ".PersonPhone");
            HasKey(x => new { x.BusinessEntityId, x.PhoneNumber, x.PhoneNumberTypeId });

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumber).HasColumnName("PhoneNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumberTypeId).HasColumnName("PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_PersonPhones).HasForeignKey(c => c.BusinessEntityId); // FK_PersonPhone_Person_BusinessEntityID
            HasRequired(a => a.Person_PhoneNumberType).WithMany(b => b.Person_PersonPhones).HasForeignKey(c => c.PhoneNumberTypeId); // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
        }
    }

    // PhoneNumberType
    public class Person_PhoneNumberTypeConfiguration : EntityTypeConfiguration<Person_PhoneNumberType>
    {
        public Person_PhoneNumberTypeConfiguration()
            : this("Person")
        {
        }
 
        public Person_PhoneNumberTypeConfiguration(string schema)
        {
            ToTable(schema + ".PhoneNumberType");
            HasKey(x => x.PhoneNumberTypeId);

            Property(x => x.PhoneNumberTypeId).HasColumnName("PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // StateProvince
    public class Person_StateProvinceConfiguration : EntityTypeConfiguration<Person_StateProvince>
    {
        public Person_StateProvinceConfiguration()
            : this("Person")
        {
        }
 
        public Person_StateProvinceConfiguration(string schema)
        {
            ToTable(schema + ".StateProvince");
            HasKey(x => x.StateProvinceId);

            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceCode).HasColumnName("StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName("IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Name).HasColumnName("Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_CountryRegion).WithMany(b => b.Person_StateProvinces).HasForeignKey(c => c.CountryRegionCode); // FK_StateProvince_CountryRegion_CountryRegionCode
        }
    }

    // vAdditionalContactInfo
    public class Person_VAdditionalContactInfoConfiguration : EntityTypeConfiguration<Person_VAdditionalContactInfo>
    {
        public Person_VAdditionalContactInfoConfiguration()
            : this("Person")
        {
        }
 
        public Person_VAdditionalContactInfoConfiguration(string schema)
        {
            ToTable(schema + ".vAdditionalContactInfo");
            HasKey(x => new { x.BusinessEntityId, x.FirstName, x.LastName, x.Rowguid, x.ModifiedDate });

            Property(x => x.BusinessEntityId).HasColumnName("BusinessEntityID").IsRequired().HasColumnType("int");
            Property(x => x.FirstName).HasColumnName("FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName("MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName("LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneNumber).HasColumnName("TelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TelephoneSpecialInstructions).HasColumnName("TelephoneSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Street).HasColumnName("Street").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.City).HasColumnName("City").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StateProvince).HasColumnName("StateProvince").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName("PostalCode").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegion).HasColumnName("CountryRegion").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HomeAddressSpecialInstructions).HasColumnName("HomeAddressSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.EMailAddress).HasColumnName("EMailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.EMailSpecialInstructions).HasColumnName("EMailSpecialInstructions").IsOptional().HasColumnType("nvarchar");
            Property(x => x.EMailTelephoneNumber).HasColumnName("EMailTelephoneNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName("rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName("ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // vStateProvinceCountryRegion
    public class Person_VStateProvinceCountryRegionConfiguration : EntityTypeConfiguration<Person_VStateProvinceCountryRegion>
    {
        public Person_VStateProvinceCountryRegionConfiguration()
            : this("Person")
        {
        }
 
        public Person_VStateProvinceCountryRegionConfiguration(string schema)
        {
            ToTable(schema + ".vStateProvinceCountryRegion");
            HasKey(x => new { x.StateProvinceId, x.StateProvinceCode, x.IsOnlyStateProvinceFlag, x.StateProvinceName, x.TerritoryId, x.CountryRegionCode, x.CountryRegionName });

            Property(x => x.StateProvinceId).HasColumnName("StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.StateProvinceCode).HasColumnName("StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName("IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.StateProvinceName).HasColumnName("StateProvinceName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName("TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.CountryRegionCode).HasColumnName("CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.CountryRegionName).HasColumnName("CountryRegionName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

